# Symlink gdircolors -> dircolors if needed
#-------------------------------------------------------------------------------
if ! [ hash gdircolors 2>/dev/null ]; then
	mkdir -p $FRESH_BIN_PATH
	ln -sf $(which gdircolors) "$FRESH_BIN_PATH/dircolors"
fi

# Symlink gfind -> find if needed
#-------------------------------------------------------------------------------
if ! [ hash gfind 2>/dev/null ]; then
	mkdir -p $FRESH_BIN_PATH
	ln -sf $(which gfind) "$FRESH_BIN_PATH/find"
fi

################################################################################
# macOS defaults dependant on custom resources                                 #
################################################################################

# Set Font and Color Theme
defaults write com.apple.dt.xcode XCFontAndColorCurrentTheme -string "Solarized Dark.xccolortheme"

################################################################################
# Update NeoVIM with python engine
################################################################################
if [[ -x "$(command -v pip2)" ]]; then
  pip2 install neovim --upgrade
fi
pip3 install neovim --upgrade

################################################################################
# Set Terminal to use Option as Meta key
################################################################################

function setPlistDataProperty () {
	local keypath="$1"
	local value="$2"
	local plist="$3"

	plutil -remove "$keypath" "$plist" &> /dev/null || true
	plutil -insert "$keypath" -data "$value" "$plist"
}

BUILD_THEME="$FRESH_PATH/build/theme.terminal"
THEME_NAME="$(/usr/libexec/PlistBuddy -c "Print :name" "$BUILD_THEME")"
THEME_EXISTS=$(osascript <<EOD
tell application "Terminal"
	try
		settings set "$THEME_NAME"
		0 -- Return 0 to indicate success (Unix convension), or "Theme exists"
	on error
    1 -- Return 1 to indicate failure (Unix convension), or "Theme does not exist"
	end try
end tell
EOD
)

if ! [ $THEME_EXISTS -eq 0 ]; then
  THEME_PATH="/tmp/terminal_theme/$THEME_NAME.terminal"
  mkdir -p "/tmp/terminal_theme"
  cp "$BUILD_THEME" "$THEME_PATH"
  chmod a+rw "$THEME_PATH"

	# Make Terminal treat <OPTION> as the <M> key for vim key commands
	/usr/libexec/PlistBuddy "$THEME_PATH" &> /dev/null <<-MOD
	Add :useOptionAsMetaKey bool
	Set :useOptionAsMetaKey true
	Save
	Exit
	MOD

	# Add Solorized colors as the terminal's ansi colors
	setPlistDataProperty ANSIBlackColor "$(generate-terminal-color -c "#073642")" "$THEME_PATH"
	setPlistDataProperty ANSIRedColor "$(generate-terminal-color -c "#dc322f")" "$THEME_PATH"
	setPlistDataProperty ANSIGreenColor "$(generate-terminal-color -c "#859900")" "$THEME_PATH"
	setPlistDataProperty ANSIYellowColor "$(generate-terminal-color -c "#b58900")" "$THEME_PATH"
	setPlistDataProperty ANSIBlueColor "$(generate-terminal-color -c "#268bd2")" "$THEME_PATH"
	setPlistDataProperty ANSIMagentaColor "$(generate-terminal-color -c "#d33682")" "$THEME_PATH"
	setPlistDataProperty ANSICyanColor "$(generate-terminal-color -c "#2aa198")" "$THEME_PATH"
	setPlistDataProperty ANSIWhiteColor "$(generate-terminal-color -c "#eee8d5")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightBlackColor "$(generate-terminal-color -c "#002b36")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightRedColor "$(generate-terminal-color -c "#cb4b16")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightGreenColor "$(generate-terminal-color -c "#586e75")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightYellowColor "$(generate-terminal-color -c "#657b83")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightBlueColor "$(generate-terminal-color -c "#839496")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightMagentaColor "$(generate-terminal-color -c "#6c71c4")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightCyanColor "$(generate-terminal-color -c "#93a1a1")" "$THEME_PATH"
	setPlistDataProperty ANSIBrightWhiteColor "$(generate-terminal-color -c "#fdf6e3")" "$THEME_PATH"

  # Use a modified version of the Solarized Dark theme by default in Terminal.app
  osascript <<EOD
tell application "Terminal"
	local allOpenedWindows
	local initialOpenedWindows
	local windowID
	set themeName to "$THEME_NAME"
	(* Store the IDs of all the open terminal windows. *)
	set initialOpenedWindows to id of every window
	(* Open the custom theme so that it gets added to the list
	   of available terminal themes (note: this will open two
	   additional terminal windows). *)
	do shell script "open '$THEME_PATH'"
	(* Wait a little bit to ensure that the custom theme is added. *)
	delay 1
    
    (* Theme customization *)
    set font name of (settings set themeName) to "MonoidNerdFontComplete---Regular"
    --set font size of (settings set themeName) to 11
    --set number of rows of (settings set themeName) to 24
    --set number of columns of (settings set themeName) to 80
    
	(* Set the custom theme as the default terminal theme. *)
	set default settings to settings set themeName
	(* Get the IDs of all the currently opened terminal windows. *)
	set allOpenedWindows to id of every window
	repeat with windowID in allOpenedWindows
		(* Close the additional windows that were opened in order
		   to add the custom theme to the list of terminal themes. *)
		if initialOpenedWindows does not contain windowID then
			close (every window whose id is windowID)
		(* Change the theme for the initial opened terminal windows
		   to remove the need to close them in order for the custom
		   theme to be applied. *)
		else
			set current settings of tabs of (every window whose id is windowID) to settings set themeName
		end if
	end repeat
end tell
EOD
fi

# vim: set ft=sh :
