#!/usr/bin/env bash

function setcolor {
	if [ -x "$(command -v setcolor)"  ]; then
		$(command -v setcolor) "$@"
  elif [ -x "${FRESH_LOCAL:-.}/All/bin/setcolor" ]; then
		"${FRESH_LOCAL:-.}"/All/bin/setcolor "$@"
  fi
}

function _is_git_repo {
	if [[ $# -gt 0 ]]; then
		pushd "$1" 1>/dev/null || return
	fi
	
	git rev-parse --is-inside-work-tree > /dev/null 2>&1
	result=$?
	
	if [[ $# -gt 0 ]]; then
		popd 1>/dev/null
	fi
	
	return $result
}

function _needs_git_pull {
	if [[ $# -gt 0 ]]; then
		pushd "$1" 1>/dev/null || return
	fi
	
	local needs_pull
	_is_git_repo || needs_pull=false
	if [ -z ${needs_pull+x} ]; then
		local branch
		if branch="$(git symbolic-ref -q HEAD)"; then
			branch="${branch#refs/heads/}"
			# Escape branch name if needed
			branch="${branch//\\/\\\\}"
	  else
	    branch="$(git rev-parse --short -q HEAD)"
	  fi
		
		if [[ -n "${branch}" ]]; then
			local remote="$(git config --get branch.${branch}.remote 2>/dev/null)"
			if [[ -n "${remote}" ]]; then
				local remote_branch="$(git config --get branch.${branch}.merge)"
				if [[ -n "$remote_branch" ]]; then
					remote_branch=${remote_branch/refs\/heads/refs\/remotes\/$remote}
					commit_behind="$(git rev-list --count HEAD..$remote_branch 2>/dev/null)"
          if [[ ${commit_behind} -gt 0 ]]; then
  					needs_pull=true
          fi
				fi
			fi
		fi
	fi
	
	if [[ $# -gt 0 ]]; then
		popd 1>/dev/null
	fi
	
	[[ "${needs_pull:-false}" == true ]] && return 0 || return 1
}

function _sudo {
  if [[ "$(id -u)" -ne 0 ]]; then
    sudo "$@"
  else
    "$@"
  fi
}

function _encrypt {
  local algorithm="AES256"
  local multi=false
  local output
  local input=()
  local src
  local delete_originals=false
  local passphrase_arg
  local force=false
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -c|--algorithm|--cipher|--cipher-algo)
      algorithm="$2"
      shift
      ;;
    -o|--out)
      output="$2"
      shift
      ;;
    -d|--delete)
      delete_originals=true
      ;;
    --passphrase-stdin)
      passphrase_arg="--batch --passphrase-fd 0"
      ;;
    -f|--force)
      force=true
      ;;
    *)
      input+=( "$1" )
      if [[ ${#input[@]} -gt 1 ]] || [[ -d "$1" ]]; then
        multi=true
      fi
      ;;
    esac
    shift
  done
  
  if [[ "${multi}" == true ]]; then
    if [[ -z ${output:+x} ]]; then
      if [[ ${#input[@]} -gt 1 ]]; then
        output="secrets"
      else
        output="$(basename "${input[0]}")"
      fi
    fi
    output="${output}.multi"
    tar cf "${output}" "${input[@]}"
    src="${output}"
  else
    src="${input[0]}"
  fi
  
  if [[ "${force}" == true ]]; then
    if [[ -n ${output:+x} ]]; then
      test -e "${output}.gpg" && rm "${output}.gpg"
    elif [[ -e "${src}.gpg"  ]]; then
      rm "${src}.gpg"
    fi
  fi
  gpg -c --no-symkey-cache --cipher-algo "${algorithm}" ${passphrase_arg} ${output:+-o "${output}.gpg" } "${src}"
  if [[ "${multi}" == true ]]; then
    rm "${output}"
  fi
  if [[ "${delete_originals}" == true ]]; then
    for original in "${input[@]}"; do
      rm -r "${original}"
    done
  fi
}

function _decrypt {
  for input in "$@"; do
    local output="${input%.gpg}"
    gpg -d -o "${output}" "${input}"
    if [[ "${output}" == *.multi ]]; then
      tar xf "${output}"
      rm "${output}"
    fi
  done
}
